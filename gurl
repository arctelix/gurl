#!/bin/bash

# g for gurl - A shortcut and alias wrapper around git
#
# Author: arctelix@gmail.com
# Licence: MIT


_gurl () {

    # This array is split on '=' for regex/url
    # Correct formatting is REQUIRED see _grul
    local endpoints=(
        'gh|github=https://github.com/<user>/<repo>'
        'bb|bitbucket=https://<user>@bitbucket.org/<user>/<repo>'
        'hr|heroku=https://git.heroku.com/<repo>'
    )
    endpoints+=( "${GURL_ENDPOINTS[@]}" )

    local useage="
    \rUsage: gurl [help] [list] [-uqt] [<git commands>]
    \r             <server> [<user>/]<repo>
    \r
    \r       * Omit '<user>/' for .gitignore user.name
    \r
    \rOptions: Must immediately follow gurl command
    \r
    \r    help          Display gurl and git help
    \r    list          Display list of endpoints
    \r    -q            Quiet output messages
    \r    -t            Return git command without execution
    \r    -u            Return converted endpoint url
    \r                  > gurl -u <server> [<user>/]<repo>"

    local help="
    \r======================================================
    \rgurl - A shortcut and alias wrapper around git
    \r------------------------------------------------------
    \rUse 'gurl' as a general replacement for git and
    \rwherever git expects a url to a git endpoint the gurl
    \rendpoint syntax may be used: <server> [<user>/]<repo>
    \r$useage\n
    \rendpoints:
    \r
    \r$(printf "    %s\n" "${endpoints[@]}")
    \r
    \r    Extend the built in endpoints with your own
    \r    by adding them to a GURL_ENDPOINTS array in
    \r    your shell's rc file.  Each endpoint takes the
    \r    the form 'regex=url'.  All occurrences of
    \r    <user> & <repo> in the url will be replaced
    \r    during command execution.
    \r
    \rAliases:
    \r

    \r    re    = remote
    \r    ra    = remote add
    \r    rs    = remote show
    \r    rr    = remote remove
    \r    rao   = remote add origin
    \r    rsu   = remote set-url
    \r    rgu   = remote get-url
    \r    cl    = clone
    \r    cp    = cherry-pick
    \r    co    = checkout
    \r    ci    = commit
    \r    cm    = commit -am
    \r    st    = status
    \r    br    = branch
    \r    us    = reset HEAD --
    \r    dc    = diff --cached
    \r    lg    = log --graph #plus formatting
    \r    last  = log -1 --stat
    \r
    \r    gurl is totally cool with .gitconfig aliases
    \r    > git config alias.c clone
    \r    > gurl c gh <repo>
    \r
    \r    Add add the following line to your shell's rc
    \r    file to enable gurl aliases: 'source gurl -q'
    \r
    \r    g     = gurl
    \r    gc    = gurl clone
    \r    gra   = gurl remote add
    \r    grs   = gurl remote show
    \r    grr   = gurl remote show
    \r    grao  = gurl remote add origin
    \r    grah  = gurl remote add heroku hr
    \r    gu    = gurl -qu
    \r
    \r
    \rEquivalent examples if <user> = config user.name:
    \r
    \r    # Git clone
    \r    > git clone https://github.com/<user>/<repo>
    \r    > gurl clone gh <user>/<repo>
    \r    # Git clone ith aliases
    \r    > gurl cl gh <repo>
    \r    > gc gh <repo>
    \r
    \r    # Git remote add
    \r    > git remote add origin https://github.com/<user>/<repo>
    \r    > gurl remote add origin <user>/<repo>
    \r    > gurl ra origin <repo>
    \r    # Git remote add with aliases
    \r    > gra origin <repo>
    \r    > grao <repo>
    \r
    \r======================================================
    \n"

    # handle g for gurl
    if [ "$1" = "--gforgurl" ]; then

        # Convert help when called as g
        if [[ ! "$1" || "$1" = help ]];then
            useage="${useage//gurl/g}"
            help="${help//gurl/g}"
            help="${help/g -/g for gurl -}"
            fi
        shift

    fi

    local url url_converted arg cmd match alias_val url_only quiet test git_status opt_param
    local first_arg="$1"
    local opts=()

    # Check for options in first arg only
    case "$1" in
        --help | help )     printf "$help";;
        --list | list )     printf "$endpoints" ; return;;

        # parse combined options
        -* )                for i in $(seq 1 ${#1});do
                                case ${1:i-1:1} in
                                u )     url_only=true; opts+=(${1:i-1:1}) ;;
                                q )     quiet=true; opts+=(${1:i-1:1}) ;;
                                t )     test=true; opts+=(${1:i-1:1}) ;;
                                esac
                            done

                            if [ "$opts" ]; then shift; fi ;;
    esac

    # No args supplied show help
    if ! [ "$1" ]; then
        [ ! "$quiet" ] && [ ! "$test" ] && printf "$help"
        return
    fi

    # Required regex matches
    local re_param='[^[:space:]]'
    local re_clone="clone\ "
    local re_r_add="remote\ add\ $re_param+\ "
    local re_r_seturl="remote\ set-url\ $re_param+\ "


    cmd=()
    match=()

    # Collect additional args and check for url
    while [[ $# > 0 ]] ; do

        case "$1" in

            # gurl aliases
            re )        arg=( remote ) ;;
            rs )        arg=( remote show ) ;;
            ra )        arg=( remote add ) ;;
            rr )        arg=( remote remove ) ;;
            rao )       arg=( remote add origin ) ;;
            rsu )       arg=( remote set-url ) ;;
            rgu )       arg=( remote get-url ) ;;
            cl )        arg=( clone ) ;;
            cp )        arg=( cherry-pick ) ;;
            co )        arg=( checkout ) ;;
            ci )        arg=( commit ) ;;
            cm )        arg=( commit -am ) ;;
            st )        arg=( status -sb ) ;;
            br )        arg=( branch ) ;;
            us )        arg=( reset HEAD -- ) ;;
            dc )        arg=( diff --cached ) ;;
            lg )        arg=( log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Cblue<%an>%Creset' --abbrev-commit --date=relative --all ) ;;
            last )      arg=( log -1 --stat ) ;;

            # Check for git config aliases
            * )         alias_val="$(git config "alias.$1" 2>/dev/null)"
                        arg=( "${alias_val:-$1}" ) ;;
        esac

        # build cmd for execution
        cmd+=( "${arg[@]}" )
        opt_param=''

        # filter git options and option params from match string
        if [[ "$1" != "-"* ]] ; then

            # reject remote add opt with param
            if [[ "${cmd[*]}" =~ remote\ add\  ]]; then

                # Test for options with params -tm
                [[ "${cmd[*]}" =~ -[tm]+\ $re_param+$ ]] && opt_param=true

            # reject clone opt with param
            elif [[ "${cmd[*]}" =~ clone\  ]]; then

                # Test for options with params -obu , --reference, --depth
                [[ "${cmd[*]}" =~ -[obu]+\ $re_param+$ ]]||
                [[ "${cmd[*]}" =~ --reference\ $re_param+$ ]] ||
                [[ "${cmd[*]}" =~ --depth\ $re_param+$ ]] && opt_param=true
            fi

            [ ! "$opt_param" ] && match+=( ${arg[*]} )
        fi

        #echo "  cmd: ${cmd[*]}" 1>&2
        #echo "  match: ${match[*]}" 1>&2
        #echo "  u: $url_only" 1>&2

        # Check url requirements
        # url_only and no captured cmd (-u was first arg)
        # or cmd matches regex requirements for url conversion
        if [[ "$url_only" ]] || [[ "${match[*]}" =~ $re_clone|$re_r_add|$re_r_seturl ]]; then

            # Use existing url
            if [[ "$1" =~ .*://.* ]]; then
                url="$1"

            # Convert shorthand to url
            else
                url="$(_gurl_url "$1" "$2")"
                url_converted=$?

                if [ $url_converted -ne 0 ]; then
                    [ ! "$quiet" ] && printf "$useage\n" 1>&2
                    return $url_converted

                # url found (replace server with url and shift repo arg)
                elif [ "$url" ]; then
                    cmd[${#cmd[@]}-1]="$url"
                    shift;

                fi

            fi
        fi

        shift
    done

    [ "$url_only" ] && echo "$url" && return $url_converted

    [ "$test" ] && echo "git ${cmd[@]}" && return $url_converted

    git "${cmd[@]}"
    git_status=$?

    # display executed command on git error
    if [ $git_status -ne 0 ] && [ "$url_converted" ] && [ ! "$quiet" ]; then
        echo "gurl executed: git ${cmd[@]}" 1>&2
    fi

    return $git_status
}

# Returns a full url to a repo using endpoints shortcuts
_gurl_url () {

    local url user repo s_regex s_url

    # parse user/repo
    user="${2%/*}"
    repo="${2#*/}"

    #echo "  getting url : $@" 1>&2

    # Check for user/repo or get user from config
    if [[ "$2" != *"/"* ]]; then
        user="$(git config user.name)"
        if [ $? -ne 0 ]; then
            printf "gurl error: You must specify 'user/repo' or set
                  \r            'git config user.name'\n" 1>&2;
            return 1

        fi
    fi

    # Match endpoints and replace with a full url
    # Endpoints strings are split on '=' for regex=url
    #   url occurrences of <user> are replaced with $user
    #   url occurrences of <repo> are replaced with $repo
    for s in ${endpoints[@]}; do
        s_regex="${s%=*}"
        s_url="${s#*=}"
        #echo "checking pattern $s_pat" 1>&2
        if [[ "$1" =~ $s_regex ]]; then
            url="${s_url//\<user\>/$user}"
            url="${url//\<repo\>/$repo}"
            break
        fi
    done

    # Return url or error
    if [ "$url" ]; then

        # add .git extension
        [ ! "$url_only" ] && url="$url.git"

        # output generated url to stderr as a confirmation
        [[ ! "$quiet" && ! "$url_only" ]] && echo "gurl success: $url" 1>&2

        # return converted url
        echo "$url"
        return 0

    else
        [ ! "$quiet" ] && printf "gurl error: $1 is not a valid endpoint, try:\n" 1>&2
        [ ! "$quiet" ] && printf "    %s\n" "${endpoints[@]}" 1>&2
        return 1
    fi

}

# g for gurl shortcut
g () {
    gurl --gforgurl "$@"
}

alias gc='g clone'
alias gra='g remote add'
alias grs='g remote show'
alias grr='g remote remove'
alias grao='g remote add origin'
alias grah='g remote add heroku hr'
alias gu='g -qu'

# command called (not sourced)
if echo "$0" | grep -q 'gurl'; then
    _gurl "$@"
fi



